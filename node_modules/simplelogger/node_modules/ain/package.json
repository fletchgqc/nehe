{
  "name": "ain",
  "description": "Syslog logging for node.js",
  "version": "0.0.1",
  "main": "./index",
  "author": {
    "name": "Alexander Dorofeev"
  },
  "maintainers": [
    {
      "name": "Alexander Dorofeev",
      "email": "aka.spin@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/akaspin/ain.git"
  },
  "bugs": {
    "url": "http://github.com/akaspin/ain/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/akaspin/ain/master/LICENSE"
    }
  ],
  "readme": "# ain*\r\n\r\nBrain-free [syslog](http://en.wikipedia.org/wiki/Syslog)** logging for \r\n[node.js](http://nodejs.org).\r\n\r\n*Ain* written with full compatibility with *node.js* `console` module. It \r\nimplements all `console` functions and formatting. Also *ain* supports UTF-8 \r\n(tested on Debian Testing/Sid).\r\n\r\n*Ain* send messages by UDP to `127.0.0.1:514` (it's more scalable than \r\nunix domain socket `/dev/log`) in \r\n[RFC 3164](http://www.faqs.org/rfcs/rfc3164.html).\r\n\r\n*In the Phoenician alphabet letter \"ain\" indicates eye.\r\n\r\n**All examples tested under Debian Squeeze `rsyslog`. On other operating \r\nsystems and logging daemons settings and paths may differ.\r\n\r\n## Installation\r\n\r\nYou can install *ain* as usual - by copy \"ain\" directory in your \r\n`~/.node_libraries` or via *npm*\r\n\r\n    npm install ain\r\n\r\n## Usage\r\n\r\nUsage of *ain* is very similar to *node.js* console. Following example \r\ndemonstrates the replacement of the console:\r\n\r\n    var console = require('ain');\r\n    \r\n    console.log('notice: %d', Date.now());\r\n    console.info('info');\r\n    console.error('error');\r\n    \r\nAfter launch in `/var/log/user` you can see the following:\r\n\r\n    Dec  5 06:45:26 localhost ex.js[6041]: notice: 1291513526013\r\n    Dec  5 06:45:26 localhost ex.js[6041]: info\r\n    Dec  5 06:45:26 localhost ex.js[6041]: error\r\n    \r\n## Changing destinations\r\n\r\nBy default *ain* sets following destinations:\r\n\r\n* `TAG` - `__filename`\r\n* `Facility` - user (1)\r\n* `HOSTNAME` - localhost\r\n\r\nYou can change them by `set` function. `set` function is chainable.\r\n\r\n    var logger = require('ain')\r\n            .set('node-test-app', 'daemon', 'devhost');\r\n    logger.warn('some warning');\r\n    \r\n... and in `/var/log/daemon.log`:\r\n\r\n    Dec  5 07:08:58 devhost node-test-app[10045]: some warning\r\n    \r\n`set` function takes three arguments: `tag`, `facility` and `hostname`. All \r\nof these are optional.\r\n\r\n`tag` and `hostname` arguments is just *RFC 3164* `TAG` and `HOSTNAME` of \r\nyour messages.\r\n\r\n`facility` is little more than just name. Refer to *Section 4.1.1* of \r\n[RFC 3164](http://www.faqs.org/rfcs/rfc3164.html) it can be:\r\n\r\n    ##  String  Description\r\n    -----------------------\r\n     0  kern    kernel messages\r\n     1  user    user-level messages\r\n     2  mail    mail system\r\n     3  daemon  system daemons\r\n     4  auth    security/authorization messages\r\n     5  syslog  messages generated internally by syslog daemon\r\n     6  lpr     line printer subsystem\r\n     7  news    network news subsystem\r\n     8  uucp    UUCP subsystem\r\n    16  local0  local use 0\r\n    17  local1  local use 1\r\n    18  local2  local use 2\r\n    19  local3  local use 3\r\n    20  local4  local use 4\r\n    21  local5  local use 5\r\n    22  local6  local use 6\r\n    23  local7  local use 7\r\n\r\nYou can set `facility` by `String` or `Number`:\r\n\r\n    logger.set('node-test-app', 3);\r\n    logger.set('node-test-app', 'daemon');\r\n    \r\nAlso you can set `TAG`, `Facility` and `HOSTNAME` separatelly by `setTag`, \r\n`setFacility` and `setHostname` functions. All of them is chainable too.\r\n\r\nYou can get all destinations by theese properties:\r\n\r\n* `tag` TAG\r\n* `facility` Numerical representation of RFC 3164 facility\r\n* `hostname` HOSTNAME\r\n\r\n## Logging\r\n\r\nAs noticed before *ain* implements all `console` functions. Severity level is \r\nreferenced to [RFC 3164](http://www.faqs.org/rfcs/rfc3164.html):\r\n\r\n    #  String   Description\r\n    -----------------------\r\n    0  emerg    Emergency: system is unusable\r\n    1  alert    Alert: action must be taken immediately\r\n    2  crit     Critical: critical conditions\r\n    3  err      Error: error conditions\r\n    4  warn     Warning: warning conditions\r\n    5  notice   Notice: normal but significant condition\r\n    6  info     Informational: informational messages\r\n    7  debug    Debug: debug-level messages\r\n\r\n*Ain* `console`-like functions behaviour is fully compatible to *node.js* and \r\nlogs messages with different severity levels: \r\n\r\n* `log` - notice (5)\r\n* `info` - info (6)\r\n* `warn` - warn (4)\r\n* `error` - err (3)\r\n* `dir` - notice (5)\r\n* `time`, `timeEnd` - notice (5)\r\n* `trace` - err (3)\r\n* `assert` - err (3)\r\n\r\nTo log message with desired severity level you can use `send` function:\r\n\r\n    logger.send('message', 'alert');\r\n    \r\n`send` function takes two arguments: message and optional severity level. By \r\ndefault, severity level is *notice*.\r\n\r\n## Additional loggers\r\n\r\nAfter importing *ain* already has default logger. Everything that was \r\ndescribed above - just about it.\r\n\r\nIf you need log message with different `TAG`, `facility` and `HOSTNAME` \r\nwithout touching default logger, you can get independent instance of logger \r\nby `get` function.\r\n\r\n    var logger = require('ain').set('node-test-app', 'daemon', 'devhost');\r\n    logger.warn('some warning');\r\n    \r\n    var anotherLogger = logger.get(logger.tag, 'local0', logger.hostname);\r\n    anotherLogger.log('another messgage'); \r\n\r\n`get` function takes three arguments - as well as `set` function and return \r\nnew logger object. This object is just new instance of \"logger\" and has all \r\n*ain* functions (including `get`). \r\n\r\n\r\n",
  "readmeFilename": "readme.md",
  "_id": "ain@0.0.1",
  "dist": {
    "shasum": "34ad5acde3d60c435ff6f47ed7d516b544a03c3f"
  },
  "_from": "ain@>=0.0.1",
  "_resolved": "https://registry.npmjs.org/ain/-/ain-0.0.1.tgz"
}
